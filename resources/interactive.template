# {{ .saasvendor }} Antimatter Config

## Overview

The pairing process was initiated successfully. Your Google Cloud Shell terminal, and this tutorial,
are now configured for establishing a connection to {{ .saasvendor }}

Click the **Start** button to begin.

## Enabling Google Cloud KMS

You will first need to enable the Cloud KMS API:

```sh
gcloud services enable cloudkms.googleapis.com --project={{ .project }}
```

## Creating a key

Next, we need to create a keyring and key specific to data encrypted in the {{ .saasvendor }} product.

```sh
gcloud kms keyrings create \
    antimatter-{{ strings.ToLower .saasvendor }} \
    --location us-central1
```

```sh
gcloud kms keys create \
    root-key \
    --keyring antimatter-{{ strings.ToLower .saasvendor }} \
    --purpose "encryption" \
    --location us-central1
```


## Creating a Service Account

We need to create a service account
that the Antimatter services, running inside {{ .saasvendor }} infrastructure, can use to access the keyring we just
created.

```sh
gcloud iam service-accounts \
    create antimatter-{{ strings.ToLower .saasvendor }} \
  --display-name antimatter-{{ strings.ToLower .saasvendor }}
```

Note that this service account has no default permissions, and can do nothing inside your account. We must grant
it the ability to encrypt and decrypt using the keyring we just created.

```sh
gcloud kms keyrings \
    add-iam-policy-binding \
    antimatter-{{ strings.ToLower .saasvendor }} \
    --location us-central1 \
    --member serviceAccount:antimatter-{{ strings.ToLower .saasvendor }}@{{ .project }}.iam.gserviceaccount.com \
    --role roles/cloudkms.cryptoKeyEncrypterDecrypter
```

## Connecting the service account

We need to create a service account key for this role:

```sh
gcloud iam service-accounts keys create \
    sa_credentials.json \
    --iam-account=antimatter-{{ strings.ToLower .saasvendor }}@{{ .project }}.iam.gserviceaccount.com
```

We then need to encrypt these credentials so that they can only be read in a secure environment:

```sh
./antimatter encrypt-credentials sa_credentials.json
```

Note that this command deletes the original, unencrypted credentials.

## Test the connection

To send the (encrypted) service account credentials to the Antimatter services in {{ .saasvendor }} infrastructure
and test the pairing, run:

```sh
./antimatter connect
```

## Congratulations

<walkthrough-conclusion-trophy></walkthrough-conclusion-trophy>

Youâ€™re all set!

You can return to the Antimatter "Enable Encryption" screen where you clicked this Cloud Shell button
