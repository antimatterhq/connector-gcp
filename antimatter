#!/bin/bash

if [ -z "$1" ]
then
  echo "usage:"
  echo "  antimatter pair <pairing code>"
  echo "  antimatter encrypt-credentials <credentials.json>"
  echo "  antimatter connect"
  exit 1
fi

GMP=./resources/gomplate_linux-amd64-slim
#GMP=gomplate
SAAS_COMPANY=${SAAS_COMPANY:=Netflix}
export SAAS_COMPANY
export SAAS_COMPANY_LOWER=$(echo "${SAAS_COMPANY}" | tr '[:upper:]' '[:lower:]')

if [ "$1" = "pair-interactive" ]
then
  pairingcode="$2"
  # hardcoded for now
  export AM_GCP_PROJECT=$(gcloud config list --format 'value(core.project)' 2>/dev/null)
  ${GMP} \
    --context saasvendor=env:SAAS_COMPANY \
    --context project=env:AM_GCP_PROJECT \
    -f resources/interactive.template \
    -o pair-interactive.md
  cloudshell launch-tutorial pair-interactive.md
fi

if [ "$1" = "pair" ]
then
  pairingcode="$3"
  project="$2"
  if [ -z "${project}" ]
  then
    echo "usage: antimatter pair <project> <pairingCode>"
    exit 1
  fi
  if [ -z "${pairingcode}" ]
  then
    echo "usage: antimatter pair <project> <pairingCode>"
    exit 1
  fi
  export AM_GCP_PROJECT=${project}
  set -x
  gcloud config set project ${project}

  if ! curl --fail https://pair.antimatter.io/v1/pair/${pairingcode} -o pairingPacket
  then
    echo "failed to pair: pairing code invalid?"
    exit 1
  fi
  if [ -f ".resourceid" ]; then
      UNIQUEID=$(cat .resourceid)
  else
      UNIQUEID=$(head -c 48 /dev/urandom | base64 | tr -d '+/' | tr '[:upper:]' '[:lower:]' | head -c 12)
      echo -ne $UNIQUEID > .resourceid
  fi

  # load the public key for the Antimatter services on the other end
  cat pairingPacket | jq -r .publickey | base64 -d | gpg --import
  SAAS_COMPANY=$(cat pairingPacket | jq -r .vendorName)
  export SAAS_COMPANY_LOWER=$(echo "${SAAS_COMPANY}" | tr '[:upper:]' '[:lower:]')
  export ENDPOINT=$(cat pairingPacket | jq -r .endpoint)

  # 11 + 32 + 12
  KEYRING_NAME=antimatter-${SAAS_COMPANY_LOWER:0:32}-${UNIQUEID}
  SA_NAME=antimatter-${SAAS_COMPANY_LOWER:0:32}-${UNIQUEID}

  set -ex
  gcloud services enable cloudkms.googleapis.com --project=${AM_GCP_PROJECT}
  gcloud kms keyrings create ${KEYRING_NAME} --location us-central1 --project=${AM_GCP_PROJECT}
  gcloud kms keys create root-key --keyring ${KEYRING_NAME} --purpose "encryption" --location us-central1 --project=${AM_GCP_PROJECT}
  gcloud iam service-accounts create ${SA_NAME} \
    --display-name ${SA_NAME} --project=${AM_GCP_PROJECT}
  gcloud kms keyrings add-iam-policy-binding ${KEYRING_NAME} \
      --location us-central1 \
      --member serviceAccount:${SA_NAME}@${AM_GCP_PROJECT}.iam.gserviceaccount.com \
      --role roles/cloudkms.cryptoKeyEncrypterDecrypter \
      --project=${AM_GCP_PROJECT}
  gcloud iam service-accounts keys create sa_credentials.json \
      --iam-account=${SA_NAME}@${AM_GCP_PROJECT}.iam.gserviceaccount.com \
      --project=${AM_GCP_PROJECT}
  set +ex
  ./antimatter encrypt-credentials sa_credentials.json
  echo -e "\033[34;1m===========================\033[0m"
  echo -e "\033[34;1mResource creation complete\033[0m"
  echo -e "\033[34;1m===========================\033[0m"
  ./antimatter connect
fi

if [ "$1" = "encrypt-credentials" ]
then
  if [ -z "$2" ]
  then
    echo "usage:"
    echo "antimatter encrypt-credentials <credfile>"
    exit 1
  fi

  cat "$2" | gpg --encrypt --trust-model always -r hsm-v1@services.antimatter.io --armor -o sa_creds.encrypted
  echo "+ credentials encrypted. deleting original file"
  rm $2
fi

if [ "$1" = "connect" ]
then
  if [ -f ".resourceid" ]; then
      UNIQUEID=$(cat .resourceid)
  else
      echo "you need to run 'pair' or 'pair-interactive' before running 'connect'"
      exit 1
  fi

  cat pairingPacket | jq -r .publickey | base64 -d | gpg --import
  SAAS_COMPANY=$(cat pairingPacket | jq -r .vendorName)
  export SAAS_COMPANY_LOWER=$(echo "${SAAS_COMPANY}" | tr '[:upper:]' '[:lower:]')
  export ENDPOINT=$(cat pairingPacket | jq -r .endpoint)

  # 11 + 32 + 12
  KEYRING_NAME=antimatter-${SAAS_COMPANY_LOWER:0:32}-${UNIQUEID}
  SA_NAME=antimatter-${SAAS_COMPANY_LOWER:0:32}-${UNIQUEID}
  export AM_GCP_PROJECT=$(gcloud config list --format 'value(core.project)' 2>/dev/null)


  set -ex
  echo "Testing connection to ${SAAS_COMPANY}"

  cat <<EOF | curl --fail -X POST \
     --data-binary @- "${ENDPOINT}"
{
     "saCreds":"$(base64 -w0 < sa_creds.encrypted)",
     "keyring":"${KEYRING_NAME}",
     "key":"root-key",
     "project":"${AM_GCP_PROJECT}",
     "location":"us-central1"
}
EOF
  if [ "$?" = "0" ]
  then
    echo -e "\033[1;32mPairing successful\033[0m"
  else
    echo "pairing failed"
  fi

fi